library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

vunit formal_test(synchronous_fifo(arch)) {

	default clock is rising_edge(i_clk_wr);

	--key checks for FIFO functionality
	--1) No data loss
	--2) No reordering
	--3) No data duplication
	--4) No writting to full fifo
	--5) No reading from empty fifo 
	--6) rd/wr pointer can only increment by 1

	--basic proposition for formal verification of FIFO:
	--check that for any two "random" data values that arrive in 
	--predetermined order (here succesively) in the FIFO, they depart the FIFO 
	--in the same order after being read

	signal flag_in1 : std_ulogic := '0';
	signal flag_in2 : std_ulogic := '0';
	signal flag_out1 : std_ulogic := '0';
	signal flag_out2 : std_ulogic := '0';


	--random values to be pushed in succession to the FIFO 
	signal val_1 : std_ulogic_vector(g_width -1 downto 0);
	signal val_2 : std_ulogic_vector(g_width -1 downto 0);
	attribute anyconst : boolean;
	attribute anyconst of val_1 : signal is true;
	attribute anyconst of val_2 : signal is true;


	signal addr_1 : unsigned(g_depth-1 downto 0);
	attribute anyconst of addr_1 : signal is true;
	signal addr_2 : unsigned(g_depth -1 downto 0);

	addr_2 <= (others => '0') when addr_1 = 2**g_depth -1 else addr_1 + 1;

	--initialize the FIFO to all zeros, as the impl. tool will do
	signal mem_copy : fifo_mem := (others => (others => '0'));
	
	--#####################################################

	-------------------
	--ASSERT PROPERTIES
	-------------------
	--check if data is written to one location is the same data we get when
	--a read occurs in that poisition
	check_data_write_read : assert always {(i_wr = '1') and (o_full = '0') and (w_addr_w = addr_1)} |-> {true[*]; ((prev(i_rd) = '1') and (prev(o_empty) = '0') and (prev(w_addr_r) = addr_1) and (o_data = val_1))};

	--check conditions after reset
	after_reset_wr : assert always {rose(i_rst_wr)} |=>{r_addr_w = 0};
	after_reset_rd : assert always {rose(i_rst_rd)} |=>{r_addr_r = 0};
	after_reset_fill : assert always {rose(i_rst_wr)} |=> {r_fill = 0};
	after_reset_mem : assert {rose(i_rst_wr)} |=> {mem  = mem_copy};

	--check fifo full and empty
	check_full : assert always {r_fill = 2**g_depth} |-> {o_full = '1'};
	check_empty : assert always {r_fill = 0} |-> {o_empty = '1'};

	check_order_operations : assert always {(not flag_in2 and flag_in1); true[*]; (flag_in2 and flag_in1)} |-> {true[*]; (not flag_out2 and flag_out1); true[*]; (flag_out2 and flag_out1)};

	--check that data are not pushed in FIFO when they shouldn't
	check_push_when_full: assert always (({i_wr and o_full and not i_rd} |=> {stable(r_addr_w)}) abort i_rst_wr);

	--check that data are not poped from the FIFO when they shouldn't
	check_pop_when_empty : assert always (({i_rd and o_empty and not i_wr} |=> {stable(r_addr_r)}) abort i_rst_rd);

	--check that data are pushed/poped when they should
	check_push_to_full: assert always (({i_wr and not o_full} |=> {not stable(r_addr_w)}) abort i_rst_wr);
	check_pop_from_empty: assert always (({i_rd and not o_empty} |=> {not stable(r_addr_r)}) abort i_rst_rd);
	check_push_pop_empty: assert always (({i_wr and o_empty and i_rd} |=> {stable(r_addr_r) and not stable(r_addr_w)}) abort (i_rst_wr or i_rst_rd));

	--check that we have no full when read
	check_no_full : assert always(({i_rd} |=> {not o_full})abort i_rst_wr);
	--check that we have no empty when write
	check_no_empty : assert always (({i_wr} |=> {not o_empty}) abort i_rst_rd);

	--check write pointer wrap around when writting in non-full fifo in last position
	check_w_pointer_wrap : assert always (({i_wr='1' and (o_full ='0') and (w_addr_w = 2**g_depth-1)} |=> {w_addr_w =0}) abort i_rst_wr);
	--check read pointer wrap around when reading from non-empty fifo in last position
	check_r_pointer_wrap : assert always (({i_rd ='1' and o_empty = '0' and (r_addr_r = 2**g_depth-1)} |=> {w_addr_r = 0}) abort i_rst_rd);

	--check that the FIFO fill levels behaves as expected
	check_fill_level: assert always {r_fill = 0 or r_fill = prev(r_fill) or r_fill = prev(r_fill) +1 or r_fill = prev(r_fill)-1};

	--check that r/w pointers behaves as expected
	check_w_pointer: assert always {r_addr_w = 0 or r_addr_w = prev(r_addr_w) or r_addr_w = prev(r_addr_w)+1};
	check_r_pointer: assert always {r_addr_r = 0 or r_addr_r = prev(r_addr_r) or r_addr_r = prev(r_addr_r)+1};

	check_fill_range : assert always {r_fill <= 2**g_depth};
	check_ptr_behav: assert always {r_addr_w - r_addr_r <= 2** g_depth};

	--check that data in FIFO do not change if no (valid) write takes place
	check_fifo_entries: assert always {(not i_wr)} |=> {prev(mem) = mem};

	--check correct data stored after valid write
	check_valid_write : assert always (({i_wr and (not o_full)} |=> {mem(to_integer(prev(w_addr_w))) = prev(i_data)})abort i_rst_wr);

	--buffered data validity pattern, check that o_data holds correct value in a read transaction
	check_o_data_after_rd: assert always (({i_rd and (not o_empty)} |=> {o_data = mem(to_integer(prev(w_addr_r)))}) abort i_rst_rd);

	--check write & read at empty fifo :
	check_empty_write_read : assert always (({i_wr and i_rd and o_empty} |=> {(r_addr_w = prev(r_addr_w) +1) and (o_empty = '0') and (r_addr_r = prev(r_addr_r))})abort i_rst_wr);

	--check write & read at full fifo
	check_full_write_read : assert always (({i_wr and i_rd and o_full} |=> {(r_addr_w = prev(r_addr_w)) and (o_full = '0') and (r_addr_r = prev(r_addr_r)+1)})abort i_rst_wr);

	--check that we are never in illegal state  
	--check_illegal_state: assert never {wr_state = S3};

	--check that full and empty are never unknown
	check_empty_X : assert always {o_empty = '0' or o_empty = '1'};
	check_full_X: assert always {o_full = '0' or o_full = '1'};


	process(i_clk_wr,i_rst_wr)
	begin
		if(i_rst_wr = '1') then
			--wr_state <= IDLE;
			flag_in1 <= '0';
			flag_in2 <= '0';
			flag_out1 <= '0';
			flag_out2 <= '0';
		
		elsif(rising_edge(i_clk_wr)) then

			if(i_wr = '1' and o_full = '0' and w_addr_w = addr_1  and i_data = val_1) then
				flag_in1 <= '1';
			end if;

			if(i_wr = '1' and o_full = '0' and o_full = '0'  and  w_addr_w = addr_2  and i_data = val_2) then
				flag_in2 <= '1';
			end if;

			if(i_rd = '1' and o_empty = '0' and w_addr_r = addr_1  and mem(to_integer(w_addr_r)) = val_1) then
				flag_out1 <= '1';
			end if;

			if(i_rd = '1' and o_empty = '0' and w_addr_r = addr_2  and mem(to_integer(w_addr_r)) = val_2) then
				flag_out2 <= '1';
			end if;

		end if;
	end process;

	--#####################################################

	-------------------
	--ASSUME PROPERTIES
	-------------------

	--assume start conditions, not necesserily start from reset
	--in any case, start with read/write addresses at 0.
	reset_wr :assume {i_rst_wr[*2]};
	reset_rd :assume {i_rst_rd[*2]};
	reset_addresses :assume {r_addr_w = 0 : r_addr_r = 0};

	assume_mem_state : assume{mem = mem_copy};

	--assume how the address pointers should behave (for k-induction)
	assume_ptr_behav: assume {r_addr_w - r_addr_r <= 2** g_depth};
	assume_ptr_rel: assume {r_addr_w >= r_addr_r};
	assume_fill : assume {r_fill <= 2**g_depth};

	reset_domains : assume always{i_rst_wr = i_rst_rd};


	--val_1 and val_2 should be different to check against data duplication 
	assume_diff_val : assume {val_1 /= val_2};
	assume_val1_diff0 : assume {unsigned(val_1) /= 0};
	assume_val2_diff0 : assume {unsigned(val_2) /= 0};
	assume always {addr_2 = addr_1+1};

	--#####################################################

	------------------
	--COVER PROPERTIES
	------------------
	--make sure that reset is possible
	cover_rst_wr : cover {i_rst_wr = '1'};
	cover_rst_rd : cover {i_rst_rd = '1'};


	cover_order_operations : cover {(not flag_in2 and flag_in1); true[*]; (flag_in2 and flag_in1); true[*]; (not flag_out2 and flag_out1); true[*]; (flag_out2 and flag_out1)};

	--cover write & read at empty fifo :
	cover_empty_write_read : cover {i_wr and i_rd and o_empty; true; (r_addr_w = prev(r_addr_w) +1) and (o_empty = '0') and (r_addr_r = prev(r_addr_r))};

	--cover write & read at full fifo
	cover_full_write_read : cover {i_wr and i_rd and o_full; true; (r_addr_w = prev(r_addr_w)) and (o_full = '0') and (r_addr_r = prev(r_addr_r)+1)};


	--cover the act of writting data to one location and then later reading
	--that location and recovering this data
	cover_data_write_read: cover {(i_rst_wr = '1'); true[*]; (i_wr = '1') and (o_full = '0') and (w_addr_w = addr_1); true[*]; ((prev(i_rd) = '1') and (prev(o_empty) = '0') and (prev(w_addr_r) = addr_1) and (o_data = val_1))};

	cover_write_last : cover {i_wr && not o_full && w_addr_w = 2**g_depth-1};
	cover_read_last : cover {i_rd && not o_empty && w_addr_r = 2**g_depth-1};
	cover_overflow_underflow : cover {true[+]; o_overflow; true[+]; o_underflow; true[+]; o_overflow};
	cover_full : cover{rose(o_full); true [+]; fell(o_full); true[+]; rose(o_full)};
	cover_empty : cover{fell(o_empty); true[+]; rose(o_empty); true[+]; fell(o_empty)};
	cover_full_to_empty : cover {o_full;  true[+]; o_empty; true[+]; o_full};
	cover_empty_to_full : cover {o_empty; true[+]; o_full; true [+]; o_empty};
	cover_backpressure_read : cover {true[+]; i_rd = '1' and o_empty = '1'; o_data = prev(o_data)};
	covere_backpressure_write : cover {true[+]; i_wr = '1' and o_full = '1'; r_addr_w = prev(r_addr_w)};

	cover_no_dupl_reord_loss : cover {true[+];(not flag_in2 and flag_in1);true[*];(flag_in2 and flag_in1 and mem(to_integer(addr_1)) = val_1 and mem(to_integer(addr_2)) = val_2)};
}